Description: This is the infrastructure creation script to create EC2 Servers, LB, ASG related components

Parameters: 
  EnvironmentName:
    Description: An Environment Name that will be prefixed to all resources being created. 
    Type: String
  AppserverMinSize: 
    Description: The minimum number of Application servers required for ASG scaling
    Type: String 
  AppserverMaxSize: 
    Description: The maximum number of Application servers required for ASG scaling
    Type: String 
  myAppserAMI: 
    Description: This parameter is passed for selecting the AMI based on the inputs from user in the parameter file.
    Type: String    
  myAppserInstanceType: 
    Description: This parameter is passed for selecting the AMI based on the inputs from user in the parameter file.
    Type: String    
Resources:
# IAM Role to allow EC2 Server to access S3 Bucket
  AppserverS3ReadOnlyEC2: 
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: / 
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

# Instance Profile
  AppserverInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /  
      Roles:
        - !Ref AppserverS3ReadOnlyEC2

# Load Balancer Security Group
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

# App Server Security Group
  AppserverSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 
          Fn::ImportValue:
            !Sub "${EnvironmentName}-BastionEC2-CIDR1"
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 
          Fn::ImportValue:
            !Sub "${EnvironmentName}-BastionEC2-CIDR2"
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

# Launch Configurations for App Servers
  AppServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install unzip awscli -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service
          cd /var/www/html
          sudo rm /var/www/html/index.html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          sudo unzip -o udacity.zip
          sudo sed -i 's/It Works!/It Works! Udagram, Udacity/' index.html
          sudo systemctl restart apache2.service
      ImageId: !Ref myAppserAMI
      InstanceType: !Ref myAppserInstanceType
      IamInstanceProfile: !Ref AppserverInstanceProfile
      SecurityGroups:
      - Ref: AppserverSecGroup
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  # Auto Scaling Group for App Servers
  AppServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: AppServerLaunchConfig
      MinSize: !Ref AppserverMinSize
      MaxSize: !Ref AppserverMaxSize
      TargetGroupARNs:
      - Ref: AppServerTargetGroup

# Load Balancer for APP Server
  AppServerLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  # Listener port configurations
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: AppServerTargetGroup
      LoadBalancerArn:
        Ref: AppServerLB
      Port: '80'
      Protocol: HTTP

  # Listener port Rule for Application Load Balancer
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'AppServerTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  # Target Groups for App Servers
  AppServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
Outputs:    
    LoadBalancerDNSName: 
        Description: Load Balancer DNS Name
        Value: !Join ["", [ "http://", !GetAtt AppServerLB.DNSName]]
        Export:
          Name: !Sub ${EnvironmentName}-LBDNS